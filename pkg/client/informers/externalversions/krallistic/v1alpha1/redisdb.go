/*
Created by codegen
*/
// This file was automatically generated by informer-gen

package v1alpha1

import (
	krallistic_com_v1alpha1 "github.com/krallistic/redis-operator-demo/pkg/apis/krallistic.com/v1alpha1"
	versioned "github.com/krallistic/redis-operator-demo/pkg/client/clientset/versioned"
	internalinterfaces "github.com/krallistic/redis-operator-demo/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/krallistic/redis-operator-demo/pkg/client/listers/krallistic/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// RedisDBInformer provides access to a shared informer and lister for
// RedisDBs.
type RedisDBInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.RedisDBLister
}

type redisDBInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewRedisDBInformer constructs a new informer for RedisDB type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRedisDBInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.KrallisticV1alpha1().RedisDBs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.KrallisticV1alpha1().RedisDBs(namespace).Watch(options)
			},
		},
		&krallistic_com_v1alpha1.RedisDB{},
		resyncPeriod,
		indexers,
	)
}

func defaultRedisDBInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewRedisDBInformer(client, v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *redisDBInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&krallistic_com_v1alpha1.RedisDB{}, defaultRedisDBInformer)
}

func (f *redisDBInformer) Lister() v1alpha1.RedisDBLister {
	return v1alpha1.NewRedisDBLister(f.Informer().GetIndexer())
}

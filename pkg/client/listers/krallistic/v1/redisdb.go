/*
Created by codegen
*/
// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/krallistic/redis-operator-demo/pkg/apis/krallistic.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisdbLister helps list Redisdbs.
type RedisdbLister interface {
	// List lists all Redisdbs in the indexer.
	List(selector labels.Selector) (ret []*v1.Redisdb, err error)
	// Redisdbs returns an object that can list and get Redisdbs.
	Redisdbs(namespace string) RedisdbNamespaceLister
	RedisdbListerExpansion
}

// redisdbLister implements the RedisdbLister interface.
type redisdbLister struct {
	indexer cache.Indexer
}

// NewRedisdbLister returns a new RedisdbLister.
func NewRedisdbLister(indexer cache.Indexer) RedisdbLister {
	return &redisdbLister{indexer: indexer}
}

// List lists all Redisdbs in the indexer.
func (s *redisdbLister) List(selector labels.Selector) (ret []*v1.Redisdb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Redisdb))
	})
	return ret, err
}

// Redisdbs returns an object that can list and get Redisdbs.
func (s *redisdbLister) Redisdbs(namespace string) RedisdbNamespaceLister {
	return redisdbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisdbNamespaceLister helps list and get Redisdbs.
type RedisdbNamespaceLister interface {
	// List lists all Redisdbs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Redisdb, err error)
	// Get retrieves the Redisdb from the indexer for a given namespace and name.
	Get(name string) (*v1.Redisdb, error)
	RedisdbNamespaceListerExpansion
}

// redisdbNamespaceLister implements the RedisdbNamespaceLister
// interface.
type redisdbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Redisdbs in the indexer for a given namespace.
func (s redisdbNamespaceLister) List(selector labels.Selector) (ret []*v1.Redisdb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Redisdb))
	})
	return ret, err
}

// Get retrieves the Redisdb from the indexer for a given namespace and name.
func (s redisdbNamespaceLister) Get(name string) (*v1.Redisdb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("redisdb"), name)
	}
	return obj.(*v1.Redisdb), nil
}

/*
Created by codegen
*/
// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/krallistic/redis-operator-demo/pkg/apis/krallistic.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisDBLister helps list RedisDBs.
type RedisDBLister interface {
	// List lists all RedisDBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RedisDB, err error)
	// RedisDBs returns an object that can list and get RedisDBs.
	RedisDBs(namespace string) RedisDBNamespaceLister
	RedisDBListerExpansion
}

// redisDBLister implements the RedisDBLister interface.
type redisDBLister struct {
	indexer cache.Indexer
}

// NewRedisDBLister returns a new RedisDBLister.
func NewRedisDBLister(indexer cache.Indexer) RedisDBLister {
	return &redisDBLister{indexer: indexer}
}

// List lists all RedisDBs in the indexer.
func (s *redisDBLister) List(selector labels.Selector) (ret []*v1alpha1.RedisDB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisDB))
	})
	return ret, err
}

// RedisDBs returns an object that can list and get RedisDBs.
func (s *redisDBLister) RedisDBs(namespace string) RedisDBNamespaceLister {
	return redisDBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisDBNamespaceLister helps list and get RedisDBs.
type RedisDBNamespaceLister interface {
	// List lists all RedisDBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RedisDB, err error)
	// Get retrieves the RedisDB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RedisDB, error)
	RedisDBNamespaceListerExpansion
}

// redisDBNamespaceLister implements the RedisDBNamespaceLister
// interface.
type redisDBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisDBs in the indexer for a given namespace.
func (s redisDBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisDB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisDB))
	})
	return ret, err
}

// Get retrieves the RedisDB from the indexer for a given namespace and name.
func (s redisDBNamespaceLister) Get(name string) (*v1alpha1.RedisDB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redisdb"), name)
	}
	return obj.(*v1alpha1.RedisDB), nil
}
